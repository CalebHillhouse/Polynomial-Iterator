#include "Polynomial.h"
#include <sstream>
#include <cctype>
using namespace std;

//typedef std::list<Term>::iterator poly_iterator;


Polynomial::Polynomial(string line)
{
	istringstream tokens(line);
	char next_char;
	bool term_parsed = false;
	int coef = 0;
	int expo = 0;
	bool caret_found = false;
	bool sign_negative = false;
	bool coef_finished = false;
	bool expo_finished = false;


	while (tokens >> next_char) 
	{
		if (isdigit(next_char))
		{
			tokens.putback(next_char);
			int value;
			tokens >> value;
			if (!caret_found)
			{
				coef = value;
				if (sign_negative)
				{
					coef *= -1;
					sign_negative = false;
				}
				coef_finished = true;
			}
			else if(!coef_finished && sign_negative)
			{
				expo = value;
				if (sign_negative)
				{
					expo *= -1;
				}
				expo_finished = true;
			}
		}
		if (next_char == '-' && !sign_negative)
			sign_negative = true;
		else if (next_char == '-' && sign_negative)
			sign_negative = false;
		if (next_char == '^')
			caret_found = true;
		if (next_char == 'x' || next_char == 'X')
		{
			if (!coef_finished && !sign_negative)
			{
				coef = 1;
				coef_finished = true;
			}
			else
			{
				coef = -1;
				coef_finished = true;
				sign_negative = false;
			}
			expo = 1;
		}
		if (coef_finished && !caret_found && (next_char == '-' || next_char == '+'))
		{
			term_parsed = true;
			tokens.putback(next_char);
		}
		if (expo_finished && (next_char == '-' || next_char == '+'))
		{
			term_parsed = true;
			tokens.putback(next_char);
		}
		if (!(tokens >> next_char))//expression finished
		{
			term_parsed = true;
		}
		else
			tokens.putback(next_char);
		if (term_parsed)
		{
			Term new_term(coef, expo);
			m_polynomial.push_back(new_term);
			term_parsed = false;
			coef = 0;
			expo = 0;
			caret_found = false;
			sign_negative = false;
			coef_finished = false;
			expo_finished = false;
		}
	}
	/*string string_number = "";
	int temp_number;
	int coefficient = 0;
	int exponent = 0;
	bool is_positive = true;
	bool caret_symbol = false;

	for (int i = 0; i < line.length(); i++) {

		// isdigit is used to check if the first character in str is a digit and therefore
		// a valid candidate to be converted by atoi into an integer value
		if (isdigit(line[i])) {
			if (caret_symbol == true)
			{
				string_number.clear();
				caret_symbol = false;
			}
			string_number += line[i];
		}
		if (i+1 == line.length() || line[i+1] == 'x') {
			//if string is not empty
			if (string_number != "")
			{
				coefficient = stoi(string_number);
				i++;
			}
			else
			{
				coefficient = 1;
				i++;
			}

			if (!is_positive)
			{
				coefficient *= -1;
				i++;
			}

			is_positive = true;

		}
		else if (line[i] == '^') 
		{
			caret_symbol = true;
		}

		if ((line[i] == '+' || line[i] == '-') && line[i - 1] == '^') 
		{
			if (line[i] == '-')
			{
				is_positive = false;
			}

			//this is for when we have a negative exponent
			//this means that it's not finished reading the term yet
			string_number += line[i];
			continue;
		}

		// changes
		else if (line[i] == '+' || line[i] == '-' || line[i] == ' ') 
		{
			// call push_term function
			if (coefficient != 0) 
			{

				if (line[i - 1] == 'x') 
				{
					//we've reached the end of the term but the previous character is x, it means the exponent is 1
					//this if condition handles the situation where the term is for example 10x.
					//we would not encounter a ^ in this case.
					string_number.clear();
				}

				push_term(string_number, coefficient, exponent, is_positive, line[i - 1]);
				temp_number = 0;
				coefficient = 0;
				exponent = 0;
				string_number = "";
			}
			if (line[i] == '-') 
			{
				is_positive = false;
			}
			else 
			{
				is_positive = true;
			}
		}
	}

	// push remaining data
	if (string_number != "" || coefficient != 0) {
		push_term(string_number, coefficient, exponent, is_positive, line[line.size() - 1]);
	}*/
	/*string co_num, exp_num;
	char sign = '+';
	int co, exp, sel;
	for (int i = 0; i < line.length(); i++)
	{
		co_num = ""; exp_num = ""; bool isTerm = false; sign = '+';
		if (line[i] == '-' || line[i] == '+')
		{
			sign = line[i];
			i++;
		}
		else if (i-1 > 0 && line[i - 1] == '-' || i - 1 > 0 &&  line[i - 1] == '+')
		{
			sign = line[i-1];
		}
		if (line[i] != 'X' && line[i] != '^' || line[i] != 'x' && line[i] != '^')
		{
			for (int j = i; j > i - 1; j++)
			{
				if (line[j] == 'x' || line[j] == 'X' || j >= line.length() || line[j] == '-' || line[j] == '+')
				{
					i = j;
					break;
				}
				co_num += line[j];
			}
			if (sign == '-' && co_num == "") { co = -1; }
			else if (sign == '-') { co = stoi(sign + co_num); }
			else if (co_num != "") { co = stoi(co_num); }
			else if (sign == '-') { co = -1; }
			else { co = 1; }

		}
		if (line[i] == 'x' && line[i + 1] != '^')
		{
			exp = 1;
			isTerm = true;
		}
		else if (line[i] != '^' && i >= line.length() || line[i] != '^' && line[i + 1] == '-' || line[i] != '^' && line[i + 1] == '+' || line[i] == '+' && isdigit(line[i + 1]) || line[i] == '-' && isdigit(line[i + 1]))
		{
			exp = 0;
			isTerm = true;
		}

		if (line[i] == '^')
		{
			for (int j = i + 1; j < line.length(); j++)
			{
				if (line[j] == '-')
				{
					sign = line[j];
					j++;
				}
				if (line[j] != '-' || line[j] != '+')
				{
					exp_num += line[j];
				}
				if ((j + 1) >= line.length() || line[j + 1] == '-' || line[j + 1] == '+')
				{
					i = j; break;
				}
			}
			if (sign == '-') { exp = stoi(sign + exp_num); isTerm = true; }
			else if (exp_num != "") { exp = stoi(exp_num); isTerm = true; }
			else { exp = 1; isTerm = true; }
		}
		if (isTerm)
		{
			Term temp(co, exp);
			m_polynomial.push_back(temp);
		}
	}*/
}



void Polynomial::push_term(string string_number, int coefficient, int exponent, bool is_positive, char prev_char)
{
	int temp_number;

	//if string number is not empty then convert to exponent value
	if (string_number != "")
	{
		stringstream stream2(string_number);
		stream2 >> temp_number;
		if (!is_positive)
			temp_number *= -1;
		exponent = temp_number;
	}
	// added
	else if (prev_char == 'x')
	{
		exponent = 1;
	}

	Term new_item1(coefficient, exponent);
	m_polynomial.push_back(new_item1);
}

void Polynomial::insert(Term item) {

	list<Term>::iterator it = m_polynomial.begin();

	do {
		if (it == m_polynomial.end())
		{
			m_polynomial.insert(it, item);
			return;
		}
		else if (*it > item)
		{							// adds a term to the polynomial list in order.
			++it;					// if terms have equal exponents
		}							// it will combine the terms
		else if (*it == item)
		{
			*it = *it + item;
			return;
		}
		else if (*it < item)
		{
			m_polynomial.insert(it, item);
			return;
		}
	} while (it != m_polynomial.end());
	m_polynomial.push_back(item);
}

Polynomial Polynomial::operator+(Polynomial rhs)
{
	//logic here is to add the two polynomials.
	
	list<Term>::iterator rhsTempTerm;
	list<Term>::iterator lhsTempTerm;
	Term temp;
	string nada = "";
	Polynomial sumPoly(nada);


	for (rhsTempTerm = rhs.m_polynomial.begin(); rhsTempTerm != rhs.m_polynomial.end(); ++rhsTempTerm)
	{
		bool added = false;
		for (lhsTempTerm = m_polynomial.begin(); lhsTempTerm != m_polynomial.end(); ++lhsTempTerm)
		{
			if (lhsTempTerm->get_exponent() == rhsTempTerm->get_exponent())
			{
				temp.SetData(lhsTempTerm->get_coefficient() + rhsTempTerm->get_coefficient(), lhsTempTerm->get_exponent());
				lhsTempTerm->clear();
				added = true;
			}
		}
		if (!added)
		{
			temp.SetData(rhsTempTerm->get_coefficient(), rhsTempTerm->get_exponent());
		}
		sumPoly.insert(temp);
	}
	for (lhsTempTerm = m_polynomial.begin(); lhsTempTerm != m_polynomial.end(); ++lhsTempTerm)
	{
		temp.SetData(lhsTempTerm->get_coefficient(), lhsTempTerm->get_exponent());
		sumPoly.insert(temp);
	}
	return sumPoly;
}

ostream& operator<<(ostream& os, Polynomial& poly)
{
	list<Term>::iterator tempTerm;
	for (tempTerm = poly.m_polynomial.begin(); tempTerm != poly.m_polynomial.end(); ++tempTerm)
	{
		if (tempTerm->get_coefficient() > 0 && tempTerm != poly.m_polynomial.begin())
		{
			cout << '+';
		}
		os << *tempTerm;
	}
	return os;
}
